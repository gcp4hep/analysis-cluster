jupyterhub:
  singleuser:
    startTimeout: 900
    # Defines the default image
    image:
      name: eu.gcr.io/gke-dev-311213/jupyter-coffea
      tag: "20210518"
    extraEnv:
      ATLAS_LOCAL_ROOT_BASE: /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
    profileList:
      - display_name: "dask-awkward environment"
            description: "Environment for dask- awkward etc."
            kubespawner_override:
              image: eu.gcr.io/gke-dev-311213/dask-awkward:prodprod
      - display_name: "PHYSLITE environment [prod]"
        description: "Validated environment for experiments with DAOD_PHYSLITE with uproot, awkward etc."
        kubespawner_override:
          image: eu.gcr.io/gke-dev-311213/jupyter-physlite:prod
      - display_name: "ML environment"
        description: "tensorflow, keras, flatbuffers, joblib, pillow, pytz, scikit-learn, scipy, uproot, root-numpy"
        kubespawner_override:
           image: eu.gcr.io/gke-dev-311213/jupyter-ml-gpu:20211209
      - display_name: "ML environment with T4 GPU"
        description: "Similar to the previous ML environment, but it boots a VM with a GPU just for YOU. Only to be used when working on ML-GPU applications. Setting up your notebook will take 10 minutes or more."
        kubespawner_override:
           image: eu.gcr.io/gke-dev-311213/jupyter-ml-gpu:20211209
           node_selector:
             cloud.google.com/gke-accelerator: nvidia-tesla-t4
           extra_resource_limits:
             nvidia.com/gpu: "1"
      - display_name: "ML environment with P100 GPU"
        description: "Similar to the previous ML environment, but it boots a VM with a GPU just for YOU. Only to be used when working on ML-GPU applications. Setting up your notebook will take 10 minutes or more."
        kubespawner_override:
           image: eu.gcr.io/gke-dev-311213/jupyter-ml-gpu:20211209
           node_selector:
             cloud.google.com/gke-accelerator: nvidia-tesla-p100
           extra_resource_limits:
             nvidia.com/gpu: "1"
      - display_name: "ML environment with K80 GPU"
        description: "Similar to the previous ML environment, but it boots a VM with a GPU just for YOU. Only to be used when working on ML-GPU applications. Setting up your notebook will take 10 minutes or more."
        kubespawner_override:
           image: eu.gcr.io/gke-dev-311213/jupyter-ml-gpu:20211209
           node_selector:
             cloud.google.com/gke-accelerator: nvidia-tesla-k80
           extra_resource_limits:
             nvidia.com/gpu: "1"
      - display_name: "ML environment on megamem node"
        description: "Similar to the previous ML environment, but it boots a VM with 1.4TB memory just for YOU. Only to be used when working on applications requiring huge amounts of memory. Setting up your notebook can take 10 minutes."
        kubespawner_override:
          image: eu.gcr.io/gke-dev-311213/jupyter-ml-gpu:20211209
          extra_resource_guarantees:
            memory: "1T"
          tolerations:
            - key: megamem
              operator: "Equal"
              value: "true"
              effect: NoSchedule
    storage:
      extraVolumes:
        - name: cvmfs
          hostPath:
            path: /var/lib/cvmfs-k8s
            type: Directory
            readOnly: true
      extraVolumeMounts:
        - name: cvmfs
          mountPath: /cvmfs
          readOnly: true
          mountPropagation: HostToContainer

  proxy:
    secretToken: <SECRET_TOKEN>
    service:
      loadBalancerIP: <MY STATIC IP>
    https:
      enabled: true
      hosts:
        - <JUPYTER HOST>
      letsencrypt:
        contactEmail: <ADMIN EMAIL>
  hub:
    services:
      dask-gateway:
        apiToken: <API_TOKEN>

    networkPolicy:
      enabled: False

    config:
      Authenticator:
        admin_users:
          - <YOUR ADMIN USERS>
      GenericOAuthenticator:
        login_service: "ATLAS IAM"
        client_id: <CLIENT ID IN IAM SERVICE>
        client_secret: <CLIENT SECRET FROM IAM SERVICE>
        oauth_callback_url: https://<JUPYTER HOST>/hub/oauth_callback
        authorize_url: https://<IAM HOST>/authorize
        token_url: https://<IAM HOST>/token
        userdata_url: https://<IAM HOST>/userinfo
        # userdata_method: GET
        username_key: preferred_username
        userdata_params:
          state: state
      JupyterHub:
        authenticator_class: generic-oauth
        # template_vars:
        #  announcement: 'Access currently restricted until funding is renewed'

dask-gateway:
  traefik:
    service:
      type: LoadBalancer

  gateway:
    auth:
      jupyterhub:
        apiToken: <API_TOKEN>

    backend:
      scheduler:
        # Cores request/limit for the scheduler.
        cores:
          request: 1
          limit: 1

        # Memory request/limit for the scheduler.
        memory:
          request: "32G"
          limit: "100G"

      worker:
        extraPodConfig:
          tolerations:
            - key: "dask"
              operator: "Equal"
              value: "worker"
              effect: "NoSchedule"
          nodeSelector:
            dask: "worker"

    extraConfig:
      optionHandler: |
        from dask_gateway_server.options import Options, Integer, Float, String
        def option_handler(options):
            if ":" not in options.image:
                raise ValueError("When specifying an image you must also provide a tag")
            return {
                "image": options.image,
                "worker_cores": options.worker_cores,
                "worker_memory": int(options.worker_memory * 2 ** 30),
                "worker_extra_container_config": {
                    "resources": {
                        "limits": {"nvidia.com/gpu": options.num_gpus},
                        "requests": {"nvidia.com/gpu": options.num_gpus},
                   },
               },
            }
        c.Backend.cluster_options = Options(
            Integer("worker_cores", default=1, min=1, max=7, label="Worker Cores"),
            Float("worker_memory", default=1, min=1, max=27, label="Worker Memory (GiB)"),
            String("image", default="eu.gcr.io/gke-dev-311213/dask-gateway-coffea:20210518", label="Image"),
            Integer("num_gpus", default=0, min=0, max=1, label="Worker GPUs (0-1)"),
            handler=option_handler,
        )
